# vwzsh

#*******************************************************************************
#
# base
# local option
#
#*******************************************************************************
export VWZ="$HOME/.vwz"
export ZSH=$VWZ

export PATH=$PATH:$VWZ:$ZSH

## cache base direcotry
VWZCACHE="$HOME/.cache/vwz"
mkdir -p $VWZCACHE
## language
export LANG=en_US.UTF-8
## time
export LC_TIME=en_US.UTF-8
## prefix
export PREFIX=/usr/local

#*******************************************************************************
#
# theme
# zsh theme
#
#*******************************************************************************
autoload -U colors && colors
setopt promptsubst

vwz_setup_git_prompt () {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        unset git_prompt
        return 0
    fi

    local git_status_dirty git_status_stash git_branch

    if [ "$(git --no-optional-locks status --untracked-files='no' --porcelain)" ]; then
        git_status_dirty='%F{green}*'
    else
        unset git_status_dirty
    fi

    if [ "$(git stash list)" ]; then
        git_status_stash="%F{yellow}▲"
    else
        unset git_status_stash
    fi

    git_branch="$(git symbolic-ref HEAD 2>/dev/null)"
    git_branch="${git_branch#refs/heads/}"

    if [ "${#git_branch}" -ge 24 ]; then
        git_branch="${git_branch:0:21}..."
    fi

    git_branch="${git_branch:-no branch}"

    git_prompt="$fg[red]git $fg[blue][$fg[yellow]${git_branch}${git_status_dirty}${git_status_stash}$fg[blue]]"

	print -- $git_prompt
}

function vwz_prompt_theme () {
	local git_info=$(vwz_setup_git_prompt)
	print -- "%{$terminfo[bold]$fg[blue]%}#%{$reset_color%} \
%{$fg[cyan]%n%} %{$fg[green]%}.%{$fg[green]%~%} %{$fg[white]%}[%{%*%}] \
${git_info}
%{$terminfo[bold]$fg[red]%}$ %{$reset_color%}"
}

zle_highlight=(region:bg=magenta
			   special:bold
			   isearch:underline)

#*******************************************************************************
#
# complete
# zsh auto complete
#
#*******************************************************************************
autoload -U compinit && compinit

setopt AUTO_LIST # 在不明确的完成时自动列出选项
setopt AUTO_MENU # 在第二次连续请求完成后自动使用菜单完成
setopt AUTO_REMOVE_SLASH # 如果补全产生的最后一个字符是斜杠，而键入的下一个字符是单词定界符、斜杠或结束命令的字符（如分号或与号），则删除斜杠
setopt ALWAYS_TO_END # 标在单词内执行补全，并插入完整补全，则光标将移动到单词的末尾
setopt BASH_AUTO_LIST
setopt COMPLETE_IN_WORD # 如果未设置，则如果开始完成，光标将设置到单词的末尾。否则它会留在那里并且从两端完成
setopt COMPLETE_ALIASES # 防止命令行上的别名在尝试完成之前被内部替换。其效果是使别名成为完成目的的独特命令
setopt GLOB_COMPLETE #
setopt MENU_COMPLETE # 不列出可能性，直接插入第一项
setopt correct # 拼写纠错
setopt globdots # 模糊匹配

zstyle ':completion:*' rehash true
#开启此选项，补全时会直接选中菜单项

zstyle ':completion:*:*:*:*:*' menu select
#自动补全缓存
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path .zcache
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#自动补全选项
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always
zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'

zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

#路径补全
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-shlashes 'yes'
zstyle ':completion::complete:*' '\\'

#彩色补全菜单
# eval $(dircolors -b)
LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'
export CLICOLOR=1
export LS_COLORS
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

#错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

#kill 命令补全
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

#补全类型提示分组
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'

#*******************************************************************************
#
# edit
# zsh edit
#
#*******************************************************************************
## 在命令前增加 sudo
sudo_command_line () {
	[[ -z $BUFFER ]] && zle up-history
	[[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
	zle end-of-line # 光标移动到行尾
}

zle -N sudo_command_line

bindkey "\e\e" sudo_command_line

#*******************************************************************************
#
# directory
# zsh extend directory
#
#*******************************************************************************
setopt autocd # 不需要使用`cd`
setopt auto_pushd # 在堆中维护目录
setopt pushd_ignore_dups # 目录中删除重复项
setopt pushdminus # 反转 + 和 - 的含义
setopt pushdsilent # 在 pushd 或 popd 之后不要打印目录堆栈
setopt pushdtohome # 没有参数的 pushd 就像‘pushd $HOME’一样
setopt interactivecomments # 允许在命令中添加注释

setopt magicequalsubst
setopt numericglobsort
setopt extendedglob # 启用扩展通配
setopt longlistjobs # 使用jobs时显示PID
setopt nobeep # 不发出声音

# 为每个目录建立历史记录
cd () {
	builtin cd "$@"
	fc -W
	local HISTDIR="$VWZCACHE/zshhistory$PWD"
	if [ ! -d "$HISTDIR" ] ; then
		mkdir -p "$HISTDIR"
	fi
	export HISTFILE="$HISTDIR/zhistory"
	touch $HISTFILE
	local ohistsize=$HISTSIZE
	HISTSIZE=0
	HISTSIZE=$ohistsize
	fc -R
}

# 返回上个文件夹
cd_undo () {
  popd      > /dev/null
  zle reset-prompt
}

# 跳转到父文件夹
cd_parent() {
  pushd .. > /dev/null
  zle      reset-prompt
}

# cd 命令历史记录切换
cd_switch_history () {
	local page=0
	local loop_p=1
	local keys=("n" "p" "q")
	local all_rows=$(dirs -v | wc -l)
	local all_page=$(($all_rows / 10))

	if [[ $((all_rows % 10)) > 1 ]] ; then
		all_page=$(($all_page + 1))
	fi


	while (($loop_p))
	do
		local begin=$(($page * 10 + 1))
		local end=$(($begin + 9))
		print -- "$(dirs -v | sed -n $(printf "%d" begin),$(printf "%d" end)p)"

		echo -e "\nselect (n(next)/p(previous)/q(quit)/[index]) : \c"
		read key

		if [[ $key == "n" ]] ; then
			if [[ $page  < $all_page ]] ; then
				page=$(($page + 1))
				echo "\nnext ..."
			else
				echo "\ncurrent is latest page."
			fi
		elif [[ $key == "p" ]] ; then
			if [[ $page > 0 ]] ; then
				page=$(($page - 1))
				echo "\nprevious ..."
			else
				echo "\ncurrent is first page."
			fi

		elif [[ $key == "q" ]] ; then
			loop_p=0;
		else
			local to=$(printf "-%d" $(printf "%d" $(($key + 0))))
			echo -e "to \c"
			cd $(print $to)
			loop_p=0;
		fi
	done
}

# 自动添加cd命令
auto_cd() {
	if [[ -n $BUFFER ]] ; then
		zle expand-or-complete
	else
		BUFFER="cd "
		zle end-of-line
		zle expand-or-complete
	fi
}

zle -N cd_undo
zle -N cd_parent
zle -N cd_switch_history
zle -N auto_cd

bindkey "\t\t" auto_cd

# 开启终端进入最后使用路径
# DIRSTACKFILE="$VWZCACHE/zdirs"
# DIRSTACKSIZE=20

# if [[ ! -f $DIRSTACKFILE ]]; then
# 	touch $DIRSTACKFILE
# fi

# if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
# 	dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
# 	[[ -d $dirstack[1] ]] && cd $dirstack[1]
# fi

# chpwd() {
#   print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
# }

mkdir -p $VWZCACHE/zshhistory$PWD
export HISTFILE="$VWZCACHE/zshhistory$PWD/zhistory"

#*******************************************************************************
#
# command
# zsh prettify command
#
#*******************************************************************************
setopt nonomatch
setopt notify

#漂亮又实用的命令高亮界面
setopt extended_glob
TOKENS_FOLLOWED_BY_COMMANDS=('|' '||' ';' '&' '&&' 'sudo' 'do' 'time' 'strace')

# 定义命令颜色
vwz_recolor-cmd() {
     region_highlight=()
     colorize=true
     start_pos=0
     for arg in ${(z)BUFFER}; do
         ((start_pos+=${#BUFFER[$start_pos+1,-1]}-${#${BUFFER[$start_pos+1,-1]## #}}))
         ((end_pos=$start_pos+${#arg}))
         if $colorize; then
             colorize=false
             res=$(LC_ALL=C builtin type $arg 2>/dev/null)
             case $res in
                 *'reserved word'*)   style="fg=magenta,bold";;
                 *'alias for'*)       style="fg=cyan,bold";;
                 *'shell builtin'*)   style="fg=yellow,bold";;
                 *'shell function'*)  style='fg=green,bold';;
                 *"$arg is"*)
                     [[ $arg = 'sudo' ]] && style="fg=red,bold" || style="fg=blue,bold";;
                 *)                   style='none,bold';;
             esac
             region_highlight+=("$start_pos $end_pos $style")
         fi
         [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\|}]}:+yes} = 'yes' ]] && colorize=true
         start_pos=$end_pos
     done
}

check-cmd-self-insert() { zle .self-insert && vwz_recolor-cmd }
check-cmd-backward-delete-char() { zle .backward-delete-char && vwz_recolor-cmd }

zle -N self-insert check-cmd-self-insert
zle -N backward-delete-char check-cmd-backward-delete-char

#*******************************************************************************
#
# history
# zsh history setup
#
#*******************************************************************************
setopt HIST_IGNORE_ALL_DUPS
setopt INC_APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_REDUCE_BLANKS

# HISTFILE="$VWZCACHE/zhist"
HISTSIZE=10000
HISTFILESIZE=100000
HISTCONTROL=ignoreboth ## ignoredups ignorespace erasedups
HISTIGNORE="ls:history"
SAVEHIST=100000

HIST_WHO="`whoami`"
HIST_HOST="`who -u am i 2>/dev/null | awk '{print $NF}' | sed -e 's/[()]//g'`"

if [ "$HIST_HOST" = "" ]; then
	HIST_HOST=`hostname`
fi

HIST_USER="$HIST_WHO@$HIST_HOST"

# export HISTTIMEFORMAT="%F %T $HIST_USER"

autoload -Uz history-beginning-search-menu
zle -N history-beginning-search-menu
bindkey '^X^X' history-beginning-search-menu

autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

function vwz_history-incremental-search-backward () {
    zle .history-incremental-search-backward $BUFFER
}

zle -N history-incremental-search-backward vwz_history-incremental-search-backward
# bindkey '^r' history-incremental-search-backward

# 将历史记录汇总到一起
function vwz_allhistory {
	cat $(find $VWZCACHE/zshhistory -name zhistory)
}

# 历史记录格式化
function vwz_convhistory {
	sort $1 | # 排序
	uniq | # 合并相同
	# sed 's/^:( [0-9]*):[0-9]*;(.*)/\1::\2/g' |
	awk -F'[;]' '{ $1=strftime("%Y-%m-%d %T " ,substr($1,2)) ">>"; print }'
}

# 查看全部历史记录
function histall {
	vwz_convhistory =(vwz_allhistory) | sed '/^.{20} *cd/i\'
}

# 查看当前目录
function hist {
	vwz_convhistory $HISTFILE
}

# 历史命令查看，选择并执行
function vwz_command_history () {
	local page=0
	local loop_p=1
	local keys=("n" "p" "q")
	local all_rows=$(histall | wc -l)
	local all_page=$(($all_rows / 10))

	if [[ $((all_rows % 10)) > 1 ]] ; then
		all_page=$(($all_page + 1))
	fi


	while (($loop_p))
	do
		local begin=$(($page * 10 + 1))
		local end=$(($begin + 9))
		local result="$(histall | sort -r | awk -F'[>][>]' '{print $2}' | uniq | sed -n $(printf "%d" begin),$(printf "%d" end)p)"

		print $result | nl -b t

		echo -e "\nselect (n(next)/p(previous)/q(quit)/[index]) : \c"
		read key

		if [[ $key == "n" ]] ; then
			if [[ $page  < $all_page ]] ; then
				page=$(($page + 1))
				echo "\nnext ..."
			else
				echo "\ncurrent is latest page."
			fi
		elif [[ $key == "p" ]] ; then
			if [[ $page > 0 ]] ; then
				page=$(($page - 1))
				echo "\nprevious ..."
			else
				echo "\ncurrent is first page."
			fi

		elif [[ $key == "q" ]] ; then
			loop_p=0;
		else
			if [[ $key -ge 1 && $key -le 10 ]] ; then
				local selected=$(print $result | sed -n $(printf "%d" $key)p)
				print -z $(print $selected | awk '$1=$1')
			fi
			loop_p=0;
		fi
	done
}

zle -N vwz_command_history

# 根据单词出现频率查看全部历史记录 top20
function top! {
	local count=20

	if [[ $1 != "" ]] ; then
		count=$1
	fi

	vwz_allhistory |
		awk -F'[;]' '{ $1=strftime("%Y-%m-%d %T" ,substr($1,2)) ">>"; print $2}' |
		# sed 's/ /\n/g' |
		# sed '/^$/d' |
		sort | uniq -c | sort -nr | head -n $count | nl -ba
		# sort -nr | uniq -c | head -n $count
}

#*******************************************************************************
#
# plugins
# zsh thrid plugins
#
#*******************************************************************************
# 加载插件
function vwz_load_plugins () {
	for plugin ($PLUGINS); do
		if [ -f $VWZ/plugins/$plugin/$plugin.plugin.zsh ]; then
			source $VWZ/plugins/$plugin/$plugin.plugin.zsh
		fi
		# if [ -f $VWZ/plugins/$plugin/$plugin.zsh ]; then
		# 	source $VWZ/plugins/$plugin/$plugin.zsh
		# fi
	done
}

#*******************************************************************************
#
# environment
# zsh environment variable configure
#
#*******************************************************************************
function vwz_set_env_path ()
{
	local home_suffix="_HOME"
	local envs=("$@")
	# shift
	typeset -u env_name

	for env_item in "${envs[@]}"; do
		local env_name=${env_item%%:*}$home_suffix
		local env_path=${env_item#*:}
		local env_subpath=""

		if [[ $env_path =~ ":" ]]
		then
			local env_uname=$env_path

			env_path=${env_uname%%:*}
			env_subpath=${env_uname#*:}
		fi

		env_path=${${env_path}}

		if [ -d $env_path ]
		then
			export $env_name=$env_path
			export PATH=$PATH:$env_path/$env_subpath
		fi
	done
}

#*******************************************************************************
#
# database
# zsh database command
#
#*******************************************************************************
# pgsql
# start/stop/restart pgsql server
function vwz_pgsql ()
{
	function pgsql_cmd_help ()
	{
		cat <<EOF
pgsql - pgsql command

Usage: pgsql [options]
pgsql -s | -q | -r | -a | -t | -h

		Options:
  		-h,                         Show this help message.
  		-s,                         Start postgresql server.
  		-q,                         Stop postgresql server.
  		-r,                         Restart postgresql server.
  		-t,                         Show postgresql server status.
EOF
		}

	while getopts 'hsqrt' OPT
	do
		case $OPT in
			h) pgsql_cmd_help; return 1;;
			s) eval "su $POSTGRESQL_USER_NAME -c '$POSTGRESQL_HOME/bin/pg_ctl start -D $POSTGRESQL_HOME/data -l $POSTGRESQL_HOME/log/logfile'"
			   echo "postgresql server started";;
			q) eval "su $POSTGRESQL_USER_NAME -c '$POSTGRESQL_HOME/bin/pg_ctl stop -D $POSTGRESQL_HOME/data'"
			   echo "postgresql server stoped";;
			r) eval "su $POSTGRESQL_USER_NAME -c '$POSTGRESQL_HOME/bin/pg_ctl start -D $POSTGRESQL_HOME/data'"
			   echo "postgresql server restart";;
			t) eval "su $POSTGRESQL_USER_NAME -c '$POSTGRESQL_HOME/bin/pg_ctl status -D $POSTGRESQL_HOME/data'"
			   echo "postgresql server status";;
			*) pgsql_cmd_help
			   ; return 1;;
		esac
	done

	unset -f pgsql_cmd_help
}

zle -N vwz_pgsql

#*******************************************************************************
#
# misc
# zsh misc configure
#
#*******************************************************************************
## terminal cursor
# echo -e -n "\x1b[\x30 q" # changes to blinking block
# echo -e -n "\x1b[\x31 q" # changes to blinking block also
# echo -e -n "\x1b[\x32 q" # changes to steady block
# echo -e -n "\x1b[\x33 q" # changes to blinking underline
# echo -e -n "\x1b[\x34 q" # changes to steady underline
# echo -e -n "\x1b[\x35 q" # changes to blinking bar
echo -e -n "\x1b[\x36 q" # changes to steady bar

#以下字符视为单词的一部分
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'

## man
export MANPATH=$PREFIX/man:$MANPATH

#*******************************************************************************
#
# function
# zsh function
#
#*******************************************************************************
setopt CONTINUE_ON_ERROR

## proxy
# setpx
# set local http & https proxy
function setpx()
{
	function px_help ()
	{
		cat << EOF
setpx - set shell http/https/socks5 proxy or remove proxy

Usage: setpx [options] [<args>]
  setpx -a <ip:prot>

Options:
  -h                Show this help message.
  -a <ip:port>      Set http and https proxy.
  -s <ip:port>      Set http and https socks5 proxy.
  -r      Remove proxy.
EOF
	}

	while getopts 'ha:s:r' OPT
	do
		case $OPT in
			a) local path=$OPTARG
			   if [[ $path =~ ":" ]]
			   then
				   local host=${path%:*}
				   local post=${path##*:}

				   if [[ $host =~ "." ]]
				   then
					   echo "host is localhost, post is " $post
				   else
					   host="172.0.0.1"
				   fi

				   export http_proxy=$host:$post
				   export https_proxy=$http_proxy

				   echo "set http and https proxy is $host:$post";
			   else
				   local post=${path##*:}

				   export http_proxy=127.0.0.1:$post
				   export https_proxy=$http_proxy

				   echo "set http and https proxy is 127.0.0.1:$2";
			   fi
			   return 0
			   ;;
			s) local path=$OPTARG
			   if [[ $path =~ ":" ]]
			   then
				   local host=${path%:*}
				   local post=${path##*:}

				   if [[ $host =~ "." ]]
				   then
					   echo "host is localhost, post is " $post
				   else
					   host="172.0.0.1"
				   fi

				   export http_proxy="socks5://$host:$post"
				   export https_proxy="socks5://$http_proxy"

				   echo "set http and https proxy is socks5://$host:$post";
			   else
				   local post=${path##*:}

				   export http_proxy=127.0.0.1:$post
				   export https_proxy=$http_proxy

				   echo "set http and https proxy is 127.0.0.1:$2";
			   fi
			   return 0
			   ;;
			r) unset http_proxy
			   unset https_proxy
			   echo "unset http and https proxy"
			   return 0
			   ;;
			*)
			   ;;
		esac
	done

	px_help
	unset -f px_help
}

zle -N slhp

## service
# sctl
# run service
function sctl()
{
	sctl_help ()
	{
		cat << EOF
sctl - like service or systemctl

Usage: sctl [options] [<args>]
  sctl -s <service>

Options:
  -h      Show this help message.
  -s      Start service.
  -r      Restart service.
  -t      Check service status.
  -q      Stop service.
EOF
	}

	while getopts 's:r:q:t:h' OPT
	do
		case $OPT in
			h) sctl_help; return 1;;
			s) eval "sudo service $2 start";
			   echo "sudo service $2 start";;
			r) eval "sudo service $2 restart";
			   echo "sudo service $2 restart";;
			q) eval "sudo service $2 stop";
			   echo "sudo service $2 stop";;
			t) eval "sudo service $2 status";
			   echo "sudo service $2 status";;
			*) sctl_help; return 1;;
		esac
	done

	unset -f sctl_help
}

zle -N sctl

function vwz_transparent ()
{
	local transpro=$(print -r ${(q)"$(transset -t -a | awk '{print $4}')"})

	if [[ $transpro == 1 ]] {
		CURRENT_STATUS=0
	} else {
		CURRENT_STATUS=1
	}

	# echo $CURRENT_STATUS

	if [[ $CURRENT_STATUS != 0 && $TRANSPARENT_STATUS != 1 ]] {
		transset -t -a >> /dev/null 2>&1
	} elif [[ $CURRENT_STATUS != 1 && $TRANSPARENT_STATUS != 0 ]] {
		transset -t -a >> /dev/null 2>&1
	}

	if [[ $CURRENT_STATUS == 0 && $TRANSPARENT_STATUS == 1 ]] {
		TRANSPARENT_STATUS=0
	} elif [[ $CURRENT_STATUS == 1 && $TRANSPARENT_STATUS == 0 ]] {
		TRANSPARENT_STATUS=1
	}
}

function transparent_toggle ()
{
	if [[ "$1" == "" ]] {
		if [[ $TRANSPARENT_STATUS == 0 ]] {
			transset -t -a >> /dev/null 2>&1
			TRANSPARENT_STATUS=1
		} elif [[ $TRANSPARENT_STATUS == 1 ]] {
			transset -t -a >> /dev/null 2>&1
			TRANSPARENT_STATUS=0
		}
	} else {
		if [[ $TRANSPARENT_STATUS == 1 ]] {
			transset -t -a >> /dev/null 2>&1
			TRANSPARENT_STATUS=0
		}

		 transset -t -a "$1" >> /dev/null 2>&1
		 TRANSPARENT_STATUS=1
		 echo "set background transparency to $1 finished."
	}
}

zle -N transparent_toggle
bindkey '^o' transparent_toggle

if [[ $IS_TRANSPARENT == "" ]] {
	TRANSPARENT_STATUS=0 # 1 透明 0 不透明
} else {
	TRANSPARENT_STATUS=$IS_TRANSPARENT
}

vwz_transparent >> /dev/null 2>&1

function compress_and_encrypt ()
{
	local outputfile="SECF$(date "+%Y%m%d%H%M%S").enc"
	if [[ $2 != "" ]] {
		   outputfile=$2
	   }
	tar -zcf - $1 | openssl aes-256-cbc -a -salt -iter 5 -out $outputfile
	echo "encrypt $1 to $outputfile"
}

zle -N compress_and_encrypt

function decompression_and_decrypt ()
{
	# decfile=$(print -r ${(q)"$(openssl aes-256-cbc -d -a -iter 5 -in $1 | tar -xzvf -)"})
	openssl aes-256-cbc -d -a -iter 5 -in $1 | tar -xzvf -
	# echo $decfile
}

zle -N decompression_and_decrypt

function open_command()
{
  local open_cmd

  # define the open command
  case "$OSTYPE" in
    darwin*)  open_cmd='open' ;;
    cygwin*)  open_cmd='cygstart' ;;
    linux*)   [[ "$(uname -r)" != *icrosoft* ]] && open_cmd='nohup xdg-open' || {
                open_cmd='cmd.exe /c start ""'
                [[ -e "$1" ]] && { 1="$(wslpath -w "${1:a}")" || return 1 }
              } ;;
    msys*)    open_cmd='start ""' ;;
    *)        echo "Platform $OSTYPE not supported"
              return 1
              ;;
  esac

  ${=open_cmd} "$@" &>/dev/null
}

function pactl_sink_toggle () {
	if hash pactl 2>/dev/null; then
		local DEFAULT_SINK=$(pactl info | grep "Default Sink" | cut -d " " -f3)
		pactl set-sink-mute @DEFAULT_SINK@ toggle
	else
		echo "please install pactl"
	fi
}

function pactl_source_toggle () {
	if hash pactl 2>/dev/null; then
		local DEFAULT_SOURCE=$(pactl info | grep "Default Source" | cut -d " " -f3)
		pactl set-source-mute @DEFAULT_SOURCE@ toggle
	else
		echo "please install pactl"
	fi
}

function pactl_sink_increase () {
	if hash pactl 2>/dev/null; then
		local DEFAULT_SINK=$(pactl info | grep "Default Sink" | cut -d " " -f3)
		if [[ "$1" == "" ]]
		then
			pactl set-sink-volume @DEFAULT_SINK@ +5%
		else
			pactl set-sink-volume @DEFAULT_SINK@ +"$1"%
		fi
	else
		echo "please install pactl"
	fi
}

function pactl_source_increase () {
	if hash pactl 2>/dev/null; then
		local DEFAULT_SOURCE=$(pactl info | grep "Default Source" | cut -d " " -f3)
		if [[ "$1" == "" ]]
		then
			pactl set-source-volume @DEFAULT_SOURCE@ +5%
		else
			pactl set-source-volume @DEFAULT_SOURCE@ +"$1"%
		fi
	else
		echo "please install pactl"
	fi
}

function pactl_sink_decrease () {
	if hash pactl 2>/dev/null; then
		local DEFAULT_SINK=$(pactl info | grep "Default Sink" | cut -d " " -f3)
		if [[ "$1" == "" ]]
		then
			pactl set-sink-volume @DEFAULT_SINK@ -5%
		else
			pactl set-sink-volume @DEFAULT_SINK@ -"$1"%
		fi
	else
		echo "please install pactl"
	fi
}

function pactl_source_decrease () {
	if hash pactl 2>/dev/null; then
		local DEFAULT_SOURCE=$(pactl info | grep "Default Source" | cut -d " " -f3)
		if [[ "$1" == "" ]]
		then
			pactl set-source-volume @DEFAULT_SOURCE@ -5%
		else
			pactl set-source-volume @DEFAULT_SOURCE@ -"$1"%
		fi
	else
		echo "please install pactl"
	fi
}

## web search
function web_search()
{
  emulate -L zsh

  # define search engine URLS
  typeset -A urls
  urls=(
    $ZSH_WEB_SEARCH_ENGINES
    google      "https://www.google.com/search?q="
    bing        "https://www.bing.com/search?q="
    yahoo       "https://search.yahoo.com/search?p="
    duckduckgo  "https://www.duckduckgo.com/?q="
    startpage   "https://www.startpage.com/do/search?q="
    yandex      "https://yandex.ru/yandsearch?text="
    github      "https://github.com/search?q="
    baidu       "https://www.baidu.com/s?wd="
    ecosia      "https://www.ecosia.org/search?q="
    goodreads   "https://www.goodreads.com/search?q="
    qwant       "https://www.qwant.com/?q="
    givero      "https://www.givero.com/search?q="
    stackoverflow  "https://stackoverflow.com/search?q="
    wolframalpha   "https://www.wolframalpha.com/input/?i="
    archive     "https://web.archive.org/web/*/"
    scholar        "https://scholar.google.com/scholar?q="
  )

  # check whether the search engine is supported
  if [[ -z "$urls[$1]" ]]; then
    echo "Search engine '$1' not supported."
    return 1
  fi

  # search or go to main page depending on number of arguments passed
  if [[ $# -gt 1 ]]; then
    # build search url:
    # join arguments passed with '+', then append to search engine URL
    url="${urls[$1]}${(j:+:)@[2,-1]}"
  else
    # build main page url:
    # split by '/', then rejoin protocol (1) and domain (2) parts with '//'
    url="${(j://:)${(s:/:)urls[$1]}[1,2]}"
  fi

  open_command "$url"
}

zle -N web_search

alias bing='web_search bing'
alias google='web_search google'
alias yahoo='web_search yahoo'
alias ddg='web_search duckduckgo'
alias sp='web_search startpage'
alias yandex='web_search yandex'
alias github='web_search github'
alias baidu='web_search baidu'
alias ecosia='web_search ecosia'
alias goodreads='web_search goodreads'
alias qwant='web_search qwant'
alias givero='web_search givero'
alias stackoverflow='web_search stackoverflow'
alias wolframalpha='web_search wolframalpha'
alias archive='web_search archive'
alias scholar='web_search scholar'

#add your own !bang searches here
alias wiki='web_search duckduckgo \!w'
alias news='web_search duckduckgo \!n'
alias youtube='web_search duckduckgo \!yt'
alias map='web_search duckduckgo \!m'
alias image='web_search duckduckgo \!i'
alias ducky='web_search duckduckgo \!'

# other search engine aliases
if [[ ${#ZSH_WEB_SEARCH_ENGINES} -gt 0 ]]; then
  typeset -A engines
  engines=($ZSH_WEB_SEARCH_ENGINES)
  for key in ${(k)engines}; do
    alias "$key"="web_search $key"
  done
  unset engines key
fi

function find_proc_by_name ()
{
	ps -ef| grep $1 | grep -v grep
}

zle -N find_proc_by_name

function vwz_xinput_find_by_name () {
	# xinput | sed 's/[⎜|↳|⎡|⎣]//g' | sed -n '/ikbc/Ip' | awk '{sub(/^[\t ]*/,"");print}'
	xinput | sed 's/[⎜|↳|⎡|⎣]//g' | sed -n '/$1/Ip' | awk '{sub(/^[\t ]*/,"");print}'
}

zle -N vwz_xinput_find_by_name

## wmctrl
function vwz_wm_windows_list()
{
	# local wms=$(print -r ${(q)"$(wmctrl -x -l)"})
	local wms=$(print -r ${(q)"$(wmctrl -x -l | sed '/xfce4-panel/d')"})
	local rows=(${(s:\n:)wms})

	for i ({1..$#rows}) {
		local columns=(${=${rows[i]//\\/' '}})
		if [[ "$1" == "" ]] {
			printf "%s: %s\n" $i $columns[3]
		} else {
			   if [[ $1 == "$i" ]] {
					  local selects=$columns[3]
					  local select=(${(s:.:)selects})
					  print $select[1]
				  }
		}
	}
}

function vwz_wm_switch_window ()
{
	print "activate windows:"
	vwz_wm_windows_list
	select=""
	vared -p 'select: ' -c select
	local selected=$(vwz_wm_windows_list $select)

	$(wmctrl -x -a $selected)
}

# winesetup
# wine command
function vwz_winesetup()
{
	winecommand="WINARCH=win32 WINEPREFIX=$WINE_HOME/";
	winepram=$*;
	winesh=$winecommand$winepram;

	echo $winesh;
	eval $winesh;
}

# wine32exe
# run wine 32 app
function vwz_wine32exe()
{
	wineexecpath="Exec=env WINEPREFIX="$WINE_HOME/$1" wine-stable C:\\\\windows\\\\command\\\\start.exe /Unix $WINE_HOME/$1/dosdevices/c:/users/Public/Desktop/$2.lnk";
	echo $wineexecpath
	eval $wineexecpath
}

#*******************************************************************************
#
# bindkye
# zsh bindkey
#
#*******************************************************************************
bindkey -e
bindkey ' ' magic-space

#*******************************************************************************
#
# alias
# zsh defautl alias
#
#*******************************************************************************
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

    # Take advantage of $LS_COLORS for completion as well
    zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
fi

alias al="alias"
alias ...='cd ..'
alias h="vwz_command_history"
alias d="cd_switch_history"
alias u="cd -"
alias p="cd .."
alias l="ls -lah"
alias ll="ls -lh"
alias s="du --max-depth=1 -h"
alias f="df -h"
alias rcl="source $HOME/.zshrc"
alias rp="vwz_load_plugins"
alias tx="transset -t -x"
alias k="kill -9"
alias pk="pkill -n"
alias pg="find_proc_by_name"
alias g="grep"
alias af="al|g"
alias t="date '+Zone      : %Z %z%nYear      : %Y%nMoth&Day  : %b(%m) %d%nWeek      : %A(%w) [Total(%W)]%nTime      : %H:%M:%S%nTimestamp : %s'"

alias lo="xfce4-session-logout -l"
alias rb="sudo reboot"
alias po="sudo shutdown -h now"
alias sr="su - root"

alias cpr="cp -r"
alias md="mkdir"
alias mdp="mkdir -p"

alias enc="compress_and_encrypt"
alias dec="decompression_and_decrypt"

alias xi="xinput"
alias xie="xinput enable"
alias xid="xinput disable"

alias tl="tmux ls"
alias td="tmux a -d"
alias tt="tmux a -t"
alias tk="tmux kill-session -t"
alias ts="tmux switch-client -t"
alias tu="unse TMUX"

alias pas="pactl_sink_toggle"
alias pasin="pactl_sink_increase"
alias pasde="pactl_sink_decrease"
alias pam="pactl_source_toggle"
alias pamin="pactl_source_increase"
alias pamde="pactl_source_decrease"

alias gi="git init"
alias ga="git add ."
alias gc="git commit -m"
alias gp="git push"
alias gt="git status"
alias gr="git reset"
alias gl="git pull"
alias gf="git fetch"

hash -d l="/usr/local"
hash -d o="/opt"
hash -d t="/etc"
hash -d d="/dev"
hash -d v="/var"
hash -d m="/media"
hash -d n="/mnt"
hash -d d="$HOME/Download"
hash -d e="$HOME/.emacs.d"

#*******************************************************************************
#
# default load
# zsh default load
#
#*******************************************************************************
PROMPT=$(vwz_prompt_theme)
PLUGINS=(zsh-syntax-highlighting # https://github.com/zsh-users/zsh-syntax-highlighting.git
		 zsh-autocomplete # https://github.com/marlonrichert/zsh-autocomplete.git
		 zsh-autosuggestions # https://github.com/zsh-users/zsh-autosuggestions.git
		 vwz-ranger
		 vwrcm
		 vwruncom)

vwz_load_plugins

bindkey '^U' menu-select

if [ -f $VWZ/custom ]; then
	source $VWZ/custom
fi
