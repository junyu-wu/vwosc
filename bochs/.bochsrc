# configuration file generated by Bochs
## 插件加载
## 默认加载 biosdev, extfpuirq, gameport, iodebug, parallel, serial, speaker， unmapped
## 配置加载 e1000, es1370, ne2k, pcidev, pcipnic, sb16, usb_ehci, usb_ohci, usb_uhci, usb_xhci， voodoo
## 1 treu or 0 false 设置
# plugin_ctrl: unmapped=1, biosdev=1, speaker=1, extfpuirq=1, parallel=1, serial=1, gameport=1，usb_ehci=1, usb_ohci=1, usb_uhci=1, usb_xhci=1
plugin_ctrl: unmapped=1

## 配置界面显示设置：有3种配置界面可供选择，文本模式版本称为“ textconfig”，两个图形版本称为“ win32config”和“ wx”
# config_interface: win32config

## 显示bochs vga屏幕
## X windows interface，可跨平台
# display_library: x
# display_library: sdl2, options=fullscreen
# display_library: options=cmdmode

## 配置cpu参数
## count cpu数量
## ips 每秒模拟指令
## model 预定义模拟配置
## reset_on_triple_fault 发生三重故障重置cpu
## cpuid_limit_winnt 是否将最大CPUID功能限制为2
## ignore_bad_msrs 忽略Bochs不了解的MSR引用
## mwait_is_nop MWAIT不会将CPU置于睡眠状态
# bx_generic	                   Default Bochs CPU configured with CPUID option	cpu level 5
# pentium	                       Intel Pentium (P54C)	cpu level 5
# pentium_mmx	                   Intel Pentium MMX	cpu level 5
# amd_k6_2_chomper	               AMD-K6(tm) 3D processor (Chomper)	cpu level 5
# p2_klamath	                   Intel Pentium II (Klamath)	cpu level 6
# p3_katmai	                       Intel Pentium III (Katmai)	cpu level 6
# p4_willamette	                   Intel(R) Pentium(R) 4 (Willamette)	cpu level 6
# core_duo_t2400_yonah	           Intel(R) Core(TM) Duo CPU T2400 (Yonah)	cpu level 6
# atom_n270	                       Intel(R) Atom(TM) CPU N270	cpu level 6
# p4_prescott_celeron_336	       Intel(R) Celeron(R) 336 (Prescott)	cpu level 6, x86-64
# athlon64_clawhammer	           AMD Athlon(tm) 64 Processor 2800+ (Clawhammer)	cpu level 6, x86-64
# athlon64_venice	               AMD Athlon(tm) 64 Processor 3000+ (Venice)	cpu level 6, x86-64
# turion64_tyler	               AMD Turion(tm) 64 X2 Mobile TL-60 (Tyler)	cpu level 6, x86-64
# phenom_8650_toliman	           AMD Phenom X3 8650 (Toliman)	cpu level 6, x86-64
# core2_penryn_t9600	           Intel Mobile Core 2 Duo T9600 (Penryn)	cpu level 6, x86-64
# corei5_lynnfield_750	           Intel(R) Core(TM) i5 750 (Lynnfield)	cpu level 6, x86-64
# corei5_arrandale_m520	           Intel(R) Core(TM) i5 M 520 (Arrandale)	cpu level 6, x86-64
# corei7_sandy_bridge_2600k	       Intel(R) Core(TM) i7-2600K (Sandy Bridge)	cpu level 6, x86-64, avx
# zambezi	                       AMD FX(tm)-4100        Quad-Core Processor (Zambezi)	cpu level 6, x86-64, avx
# trinity_apu	                   AMD A8-5600K APU (Trinity)	cpu level 6, x86-64, avx
# ryzen	                           AMD Ryzen 7 1700	cpu level 6, x86-64, avx
# corei7_ivy_bridge_3770k          Intel(R) Core(TM) i7-3770K CPU (Ivy Bridge)	cpu level 6, x86-64, avx
# corei7_haswell_4770	           Intel(R) Core(TM) i7-4770 CPU (Haswell)	cpu level 6, x86-64, avx
# broadwell_ult	                   Intel(R) Processor 5Y70 CPU (Broadwell)	cpu level 6, x86-64, avx
cpu: model=bx_generic, count=1, ips=4000000, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0

## Bochs仿真CPU支持的功能，当cpu模型设置为默认值'bx_generic'时，才有效且可配置
## level 模拟CPU级别信息
## 设置CPUID返回的家庭信息。默认系列值由配置选项--enable-cpu-level确定
## model 设置CPUID返回的型号信息。默认模型值为3
## stepping 设置CPUID返回的步进信息。默认步进值为3
## vendor_string 设置由CPUID（0x0）返回的CPUID供应商字符串。这应该是一个十二个字符的ASCII字符串
## brand_string 设置CPUID返回的CPUID品牌字符串（0x80000002 .. 0x80000004]）。这最多应是一个48个字符的ASCII字符串
## mmx 选择MMX指令集支持
## apic APIC配置（LEGACY / XAPIC / XAPIC_EXT / X2APIC）
## sep SYSENTER / SYSEXIT指令集支持
## simd IMD指令支持。可以选择NONE/SSE/SSE2/SSE3/SSSE3/SSE4è1/SSE4è2/AVX/AVX2/AVX512中的任何一个
## sse4a AMD SSE4A指令支持
## misaligned_sse AMD Misaligned SSE模式支持
## aes AES指令集支持
## sha SHA指令集支持
## movbe MOVBE Intel（R）Atom指令支持
## adx ADCX / ADOX指令支持
## xsave XSAVE扩展支持
## xsaveopt XSAVEOPT指令支持
## avx_f16c AVX float16转换指令支持
## avx_fma AVX融合乘法加法（FMA）指令支持
## bmi BMI1 / BMI2指令支持
## fma4 AMD四个操作数FMA指令支持
## xop AMD XOP指令支持
## tbm AMD TBM指令支持
## x86_64 x86-64和长模式支持
## 1g_pages 在长模式下启用1G页面大小支持
## pcid 在长模式下启用进程上下文标识符（PCID）支持
## smep 启用超级用户模式执行保护（SMEP）支持
## smap 启用超级用户模式访问阻止（SMAP）支持
## mwait 选择MONITOR / MWAIT指令支持
## vmx VMX扩展程序仿真支持
## svm AMD SVM（安全虚拟机）扩展仿真支持
cpuid: level=6, stepping=3, model=3, family=6, vendor_string="GenuineIntel", brand_string="    Intel(R) Pentium(R) 4 CPU    "
# cpuid: mmx=true, apic=xapic, simd=sse2, sse4a=false, misaligned_sse=false, sep=true
# cpuid: movbe=false, adx=false, aes=false, sha=false, xsave=false, xsaveopt=false, x86_64=true
# cpuid: 1g_pages=false, pcid=false, fsgsbase=false, smep=false, smap=false, mwait=true, vmx=1

## 物理内存量
## guest 模拟的来宾物理内存量。默认值为32MB，最大数量仅受物理地址空间限制的限制
## host 设置要分配给来宾RAM仿真的主机内存量
memory: host=32, guest=32

## 与内存设置相同的值
megs: 32

## ROM BIOS控制PC首次开机时的操作
## BIOS-bochs-latest 从地址0xfffe0000开始加载默认的ROM BIOS，它的长度恰好为128k
## 使用环境变量$ BXSHARE指定BIOS的位置
## file bios 程序地址
## address 起始位置，可选的可根据图像大小进行计算
## options 仅支持选项 “fastboot” 以跳过启动菜单延迟
## romimage: file=bios/BIOS-bochs-latest, options=fastboot
## romimage: file=$BXSHARE/BIOS-bochs-legacy
## romimage: file=mybios.bin, address=0xfff80000
## romimage: file="C:\Program Files\Bochs-2.6.11/BIOS-bochs-latest", address=0x00000000, options=none
romimage: file=$BXSHARE/bochs/BIOS-bochs-latest

## Bochs 要加载什么 VGA ROM BIOS（地址 0xC0000）
## vgaromimage: file=bios/VGABIOS-elpin-2.40
## vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest
## vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest-cirrus
## vgaromimage: file="C:\Program Files\Bochs-2.6.11/VGABIOS-lgpl-latest"
# vagromimage: file=$BXSHARE/bochs/VGABIOS-elpin-2.40

## 加载多达4个可选的ROM映像
## 确保使用只读区域，通常在C8000和EFFFF之间。这些可选的ROM映像不应覆盖rombios（位于F0000-FFFFF）和videobios（位于C0000-C7FFF）
## 如果这些ROM映像包含正确的签名（0x55AA），则将由BIOS初始化
## optromimage1: file=optionalrom.bin, address=0xd0000
# optromimage1: file=none
# optromimage2: file=none
# optromimage3: file=none
# optromimage4: file=none

## 定义了与VGA显示有关的参数
## extendsion 指定VGA显示扩展名,“none”时，您可以使用不带扩展名的标准VGA
## 支持的值包括Bochs vbe的“vbe”（需要VGABIOS-lgpl-latest作为VGA BIOS）

## “cirrus”作为cirrus SVGA支持（需要VGABIOS-lgpl-latest-cirrus作为VGA BIOS）
## “voodoo”作为voodoo图形支持
## update_freq VGA更新频率指定每秒显示更新的次数
## realtime 指定VGA更新计时器的操作模式,如果设置为1，则VGA计时器基于实时，否则基于ips设置
vga: extension=vbe, update_freq=5, realtime=1

## 仿真键盘有关的参数
## type 通过“识别键盘”命令返回键盘控制器的键盘类型。它必须是“ xt”，“ at”或“ mf”之一
## serial_delay 通过串行路径将一个字符从键盘传输到控制器所花费的大约时间（以微秒为单位）
## paste_delay 两次尝试将字符粘贴到键盘控制器之间的大概时间（以微秒为单位）
## keymap 键盘映射可用于显示库x，sdl（Linux端口）和wx（GTK端口）,如：将物理本地键盘重新映射为虚拟us键盘
## user_shortcut 按下标题栏中的“用户”按钮时要发送的键盘快捷键，快捷方式字符串是最多三个键名（下面列出）的组合，用“-”字符分隔
## keyboard: type=mf, serial_delay=200, paste_delay=100000
## keyboard: keymap=gui/keymaps/x11-pc-de.map
## keyboard: user_shortcut=ctrl-alt-del
keyboard: type=mf, serial_delay=250, paste_delay=100000, user_shortcut=none

## 模拟鼠标类型的参数，鼠标捕获的初始状态以及用于切换它的运行时方法
## type 鼠标类型选项,默认ps2.其他选择“ imps2”（在PS/2上使用滚轮），“serial”，“serial_wheel”，“serial_msys”一个COM端口需要设置“ mode = mouse”，“inport”和“bus”
## enabled 创建鼠标“事件”
## toggle 运行时切换鼠标捕获的默认方法快捷键设置
## mouse: enabled=1
## mouse: type=imps2, enabled=1
## mouse: type=serial, enabled=1
## mouse: enabled=0, toggle=ctrl+f10
mouse: type=ps2, enabled=false, toggle=ctrl+mbutton

## 控制Bochs中PCI芯片组的存在，支持i430FX，i440FX和i440BX芯片组
## 还可以指定连接到PCI插槽的设备。最多有5个插槽可用
## pci: enabled=1, chipset=i440fx # default if compiled with PCI support
## pci: enabled=1, chipset=i440fx, slot1=pcivga, slot2=ne2k
## pci: enabled=1, chipset=i440bx, slot5=voodoo, slot1=e1000
pci: enabled=1, chipset=i440fx

## 内部时钟的参数
## sync 内部时间与实时同步的方法,值为“ none”，则Bochs时间取决于IPS值，并且不使用主机时间同,包含：[none|slowdown|realtime|both]
## time0 指定虚拟机的开始（启动）时间，包含：[timeValue|local|utc]
## rec_sync 如果同时启用了此选项和实时同步，则RTC将以实时速度运行。默认情况下禁用此功能
## clock: sync=none,     time0=local       # Now (localtime)
## clock: sync=slowdown, time0=315529200   # Tue Jan  1 00:00:00 1980
## clock: sync=none,     time0="Mon Jan  1 00:00:00 1990" # 631148400
## clock: sync=realtime, time0=938581955   # Wed Sep 29 07:12:35 1999
## clock: sync=realtime, time0="Sat Jan  1 00:00:00 2000" # 946681200
## clock: sync=none,     time0=1           # Now (localtime)
## clock: sync=none,     time0=utc         # Now (utc/gmt)
# clock: sync=none, time0=local, rtc_sync=0

# no cmosimage
## 定义了一个大小为128字节的二进制图像文件，可以在启动时加载到CMOS RAM中
## cmosimage: file=cmos.img, rtc_init=time0

## 请求GUI创建并使用其自己的非共享颜色图
private_colormap: enabled=0

## floppya/floppyb
## Floppya是第一个驱动器，而floppyb是第二个驱动器
# no floppya
# no floppyb
# floppya:1_44=bochs.disk.img, status=inserted
floppya: 1_44=/dev/fd0, status=inserted

## ata通道。对于每个通道，必须指定两个基本io地址和irq。默认情况下启用ata0和ata1
ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
# ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
# ata2: enabled=1, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
# ata3: enabled=1, ioaddr1=0x168, ioaddr2=0x360, irq=9
# ata0: enabled=true, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
# ata1: enabled=true, ioaddr1=0x170, ioaddr2=0x370, irq=15
# ata2: enabled=false
# ata3: enabled=false

## type	连接设备的类型 [disk | cdrom]
## path	image 路径
## mode	image类型，仅对磁盘有效 [flat | concat | external | dll | sparse | vmware3 | vmware4 | undoable | growing | volatile | vpc | vbox | vvfat ]
## cylinders 仅对磁盘有效
## heads 仅对磁盘有效
## spt 仅对磁盘有效
## status 仅对CDROM有效	[inserted | ejected]
## biosdetect 生物检测的类型	[auto | cmos | none]
## translation BIOS完成的转换类型（传统int13），仅适用于磁盘 [none | lba | large | rechs | auto]
## model 标识设备ATA命令返回的字符串
## journal 重做日志的可选文件名，用于不可撤销，易失和vvfat磁盘
# ata0-master: type=disk, path=10M.img, mode=flat, cylinders=306, heads=4, spt=17, translation=none
# ata1-master: type=disk, path=2GB.cow, mode=vmware3, cylinders=5242, heads=16, spt=50, translation=echs
# ata1-slave:  type=disk, path=3GB.img, mode=sparse, cylinders=6541, heads=16, spt=63, translation=auto
# ata2-master: type=disk, path=7GB.img, mode=undoable, cylinders=14563, heads=16, spt=63, translation=lba
# ata2-slave:  type=cdrom, path=iso.sample, status=inserted
# ata0-master: type=disk, path=none, mode=flat, cylinders=1003, heads=12, spt=17, sect_size=512, model="Generic 1234", biosdetect=auto, translation=auto
ata0-master: type=disk, path="c.img", mode=flat, cylinders=306, heads=4, spt=17, sect_size=512, translation=auto
# ata0-slave: type=none
# ata1-master: type=none
# ata1-slave: type=none

## 启动顺序。您最多可以指定3个启动驱动器，可以是“软盘”，“磁盘”，“ cdrom”或“网络”（启动ROM）。还支持传统的“ a”和“ c”
## boot: floppy
## boot: cdrom, disk
## boot: network, disk
## boot: cdrom, floppy, disk
boot: disk

## 这将禁用引导软盘上的0xaa55签名检查。默认情况下启用该检查
floppy_bootsig_check: disabled=1

## Bochs debug和misc日志文件的路径
## 如果不使用此选项或将文件名设置为“-”，则输出将写入控制台。如果您真的不需要它，请将其设为“/dev/null”（Unix）或“nul”（win32）
## log: bochsout.txt
## log: -
## log: /dev/tty               (Unix only)
## log: /dev/null              (Unix only)
## log: nul                    (win32 only)
log: bochsout.txt

## 处理每个日志行前面的字符串格式
## %t : 11个十进制数字计时器刻度
## %i : 当前CPU eip的8个十六进制数字
## %e : 1个字符事件类型（'i'nfo，'d'ebug，'p'anic，'e'rror）
## %d : 设备的5个字符的字符串，在方括号之间
## logprefix: %t-%e-@%i-%d
## logprefix: %i%e%d
logprefix: %t%e%d

## debug/info/error/panic
## debug: action=ignore, pci=report
## info: action=report
## error: action=report
## panic: action=ask
debug: action=ignore
info: action=report
error: action=report
panic: action=ask

## debugger_log 记录调试器输出的日志文件的路径。如果您确实不想要它，请将其设置为“ / dev / null”或“-”
## debugger_log: debugger.out
## debugger_log: /dev/null              (Unix only)
## debugger_log: -

## com[1-4] 定义了一个串行端口（UART类型16550A）
## com1: enabled=1, mode=null
## com1: enabled=1, mode=mouse
## com1: enabled=1, mode=term, dev=/dev/ttyp9
## com3: enabled=1, mode=raw, dev=com1
## com3: enabled=1, mode=socket-client, dev=localhost:8888
## com3: enabled=1, mode=socket-server, dev=localhost:8888
## com4: enabled=1, mode=pipe-client, dev=\\.\pipe\mypipe
## com4: enabled=1, mode=pipe-server, dev=\\.\pipe\mypipe
# com1: enabled=true, mode=null
# com2: enabled=false
# com3: enabled=false
# com4: enabled=false

## parport[1-2] 定义了一个并行（打印机）端口。当打开并定义输出文件时，模拟打印机端口会将来宾操作系统打印的字符发送到输出文件中
## 在某些平台上，可以使用设备文件名将数据发送到真正的并行端口（例如，Linux上的“/dev/lp0”，win32平台上的“lpt1”）。输出文件可以在运行时更改
## parport1: enabled=1, file="parport.out"
## parport2: enabled=1, file="/dev/lp0"
## parport1: enabled=0
# parport1: enabled=true, file=none
# parport2: enabled=false

## waveoutdrv 用于waveout功能的驱动程序。可能的值为“文件”（将所有wave数据发送到文件），“虚拟”（无输出）以及与平台有关的驱动程序“ alsa”，“ oss”，“ osx”，“ sdl”和“ win”
## waveout 这定义了用于波形输出的设备（如有必要）或“文件”驱动程序的输出文件
## waveindrv 这定义了用于wavein功能的驱动程序。可能的值为“虚拟”（记录静音）和与平台相关的驱动程序“ alsa”，“ oss”，“ sdl”和“ win”
## wavein 定义了用于波输入的设备（如有必要）
## midioutdrv 定义了用于MIDI输出功能的驱动程序。可能的值为“文件”（所有发送到文件的MIDI数据），“虚拟”（无输出）和平台相关的驱动程序“ alsa”，“ oss”，“ osx”和“ win”
## midiout 定义了用于MIDI输出的设备（如有必要）
## driver 定义了具有一个属性的所有声音功能所使用的驱动程序。可能的值为“默认”（平台默认）和上述所有其他选项。可以使用特定的驱动程序参数覆盖一个或多个设置
## driver=default, waveout=/dev/dsp
## sound: waveoutdrv=win, waveout=none, waveindrv=win, wavein=none, midioutdrv=win, midiout=none

## PC扬声器输出模式
# speaker: enabled=true, mode=sound

## usb_uhci 控制USB根集线器的存在，它是i440FX PCI芯片组的一部分
## 支持：“鼠标”，“平板电脑”，“键盘”，“磁盘”，“ cdrom”，“软盘”，“集线器”和“打印机” 'mouse', 'tablet', 'keypad', 'disk', 'cdrom', 'floppy, ''hub' and 'printer'
## usb_uhci: enabled=1, port1=mouse, port2=disk:usbstick.img
## usb_uhci: enabled=1, port1=hub:7, port2=disk:growing:usbdisk.img
## usb_uhci: enabled=1, port2=disk:undoable:usbdisk.img, options2=journal:redo.log
## usb_uhci: enabled=1, port2=disk:usbdisk2.img, options2=sect_size:1024
## usb_uhci: enabled=1, port2=disk:vvfat:vvfat, options2="debug,speed:full"
## usb_uhci: enabled=1, port1=printer:printdata.bin, port2=cdrom:image.iso
## usb_uhci: enabled=1, port2=floppy:vvfat:diskette, options2="model:teac"

## usb_ohci 控制带有2端口集线器的USB OHCI主机控制器的存在。 portX参数使用与UHCI控制器相同的语法接受相同的设备类型
## usb_ohci: enabled=1, port1=printer:printdata.bin

## usb_ehci 控制带有6端口集线器的USB EHCI主机控制器的存在。 portX参数使用与UHCI控制器相同的语法接受相同的设备类型
## usb_ehci: enabled=1, port1=tablet, options1="speed:high"

## usb_xhci 控制带有4端口集线器的USB xHCI主机控制器的存在。 portX参数使用与UHCI控制器相同的语法接受相同的设备类型
## optionsX参数在xHCI上也可用。注意：端口1和2是USB3，仅支持超高速设备，但端口3和4是USB2，并支持低速，高速和高速设置
## usb_xhci: enabled=1, port1="disk:usbdisk.img"

## gdbstub 启用gdb，默认：gdbstub: enabled=0
# gdbstub: enabled=1, port=1234, text_base=0, data_base=0, bss_base=0

## magic_break 启用“魔术断点”功能。无用的cpu指令XCHG BX，BX使Bochs进入调试器模式。这对于软件开发可能很有用
magic_break: enabled=1

## 指定的文件加载符号，以供Bochs的内部调试器使用。将符号加载到全局上下文中。这等效于在启动时发出ldsym调试器命令
## debug_symbols: file=mysymbols.sym
## debug_symbols: file=mysymbols.sym, offset=0x1000

## 正常的ISA体系结构中不存在0xE9端
## 在运行Bochs的系统的控制台上显示写入其中的任何内容
port_e9_hack: enabled=0

# print_timestamps: enabled=0
